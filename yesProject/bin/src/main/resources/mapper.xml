<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="review">
    <resultMap id="reviewVo" type="com.bit.yes.model.entity.ReviewVo">
	<result property="idx" column="IDX"/>
	<result property="title" column="TITLE"/>
	<result property="content" column="CONTENT"/>
	<result property="calendar" column="CALENDAR"/>
<<<<<<< HEAD
</resultMap>
  <resultMap id="C_CsVo" type="com.bit.yes.model.entity.C_CsVo">
	<result property="index" column="INDEX"/>
	<result property="title" column="TITLE"/>
	<result property="content" column="CONTENT"/>
	<result property="writer" column="WRITER"/>
	<result property="calendar" column="CALENDAR"/>
	<result property="comment" column="COMMENT"/>
</resultMap>
  <resultMap id="S_CsVo" type="com.bit.yes.model.entity.S_CsVo">
	<result property="index" column="INDEX"/>
	<result property="title" column="TITLE"/>
	<result property="content" column="CONTENT"/>
	<result property="writer" column="WRITER"/>
	<result property="calendar" column="CALENDAR"/>
	<result property="comment" column="COMMENT"/>
=======
>>>>>>> master
</resultMap>
<resultMap id="UserVo" type="com.bit.yes.model.entity.UserVo">
	<result property="id" column="ID"/>
	<result property="password" column="PASSWORD"/>
	<result property="name" column="NAME"/>
	<result property="nickname" column="NICKNAME"/>
	<result property="email" column="EMAIL"/>
	<result property="phoneNum" column="PHONENUM"/>
	<result property="pwQuestion" column="PWQUESTION"/>
	<result property="birthDate" column="BIRTHDATE"/>
	<result property="registNum" column="REGISTNUM"/>
</resultMap>
<resultMap id="branch_infoVo" type="com.bit.yes.model.entity.branch_infoVo">
	<result property="id" column="ID"/>
	<result property="branchname" column="BRANCHNAME"/>
	<result property="opTime" column="OPTIME"/>
	<result property="breakTime" column="BREAKTIME"/>
	<result property="opDate" column="OPDATE"/>
	<result property="phoneNum" column="PHONENUM"/>
	<result property="score" column="SCORE"/>
	<result property="state" column="STATE"/>
	<result property="category" column="CATEGORY"/>
	<result property="branchExplain" column="BRANCHEXPLAIN"/>
	<result property="maxTable" column="MAXTABLE"/>
	<result property="tableState" column="TABLESTATE"/>
	<result property="acceptState" column="ACCEPTSTATE"/>
	<result property="waitingNum" column="WAITINGNUM"/>
</resultMap>

<<<<<<< HEAD
	<!-- 전체 회원리스트 쿼리문 -->
	
	<!-- 전체 레코드 개수 조회 --> <!-- 전체 -->
	  	<select id ="all_writeGetCount" parameterType="hashmap" resultType="int">
	  		select count(*) from mydb.user_info 
	  		  <choose>
	  			<when test="category == 'name'">
	  				where name like '%${keyword}%'
	  			</when>
	  			<when test='category == "nickname"'>
	  				where nickname like '%${keyword}%'
	  			</when>
	  			<when test='category == "email"'>
	  				where email like '%${keyword}%'
	  			</when>
	  		</choose>
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
  		<select id="all_writeList" parameterType="hashmap" resultMap="UserVo">
  			select * from mydb.user_info
  			<choose>
	  			<when test="category == 'name'">
	  				where name like '%${keyword}%'
	  			</when>
	  			<when test='category == "nickname"'>
	  				where nickname like '%${keyword}%'
	  			</when>
	  			<when test='category == "email"'>
	  				where email like '%${keyword}%'
	  			</when>
	  		</choose>
  			 order by NAME,BIRTHDATE ASC limit #{alloffset}, #{allnoOfRecords}
  		</select>
  		<select id ="all_writeInfoList" resultMap = "UserVo">
  			select * from mydb.user_info where info = 1 order by user_info.name,user_info.birthDate ASC
  		</select>
  		
  		
	<!-- 전체 레코드 개수 조회 --> <!-- 고객만 -->
	  	<select id ="user_writeGetCount" parameterType="hashmap" resultType="int">
	  		select count(*) from mydb.user_info where registNum = 0  		  
	  		<choose>
	  			<when test="category == 'name'">
	  				and name like '%${keyword}%'
	  			</when>
	  			<when test='category == "nickname"'>
	  				and nickname like '%${keyword}%'
	  			</when>
	  			<when test='category == "email"'>
	  				and email like '%${keyword}%'
	  			</when>
	  		</choose> 
	  		
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
  		<select id="user_writeList" parameterType="hashmap" resultMap="UserVo">
  			select * from mydb.user_info where registNum = 0
  			<choose>
	  			<when test="category == 'name'">
	  				and name like '%${keyword}%'
	  			</when>
	  			<when test='category == "nickname"'>
	  				and nickname like '%${keyword}%'
	  			</when>
	  			<when test='category == "email"'>
	  				and email like '%${keyword}%'
	  			</when>
	  		</choose>
  			  order by NAME,BIRTHDATE ASC limit #{useroffset}, #{usernoOfRecords}
  		</select>
  		<select id ="user_writeInfoList" resultMap = "UserVo">
  			select * from mydb.user_info where info = 1 order by user_info.name,user_info.birthDate ASC
  		</select>
  		
  		
	<!-- 전체 레코드 개수 조회 --> <!-- 사업자만 -->
	  	<select id ="branch_writeGetCount" parameterType="hashmap" resultType="int">
	  		select count(*) from mydb.user_info where not registNum = 0
	  		  <choose>
	  			<when test="category == 'name'">
	  				and name like '%${keyword}%'
	  			</when>
	  			<when test='category == "nickname"'>
	  				and nickname like '%${keyword}%'
	  			</when>
	  			<when test='category == "email"'>
	  				and email like '%${keyword}%'
	  			</when>
	  		</choose>
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
  		<select id="branch_writeList" parameterType="hashmap" resultMap="UserVo">
  			select * from mydb.user_info where not registNum = 0
  			  <choose>
	  			<when test="category == 'name'">
	  				and name like '%${keyword}%'
	  			</when>
	  			<when test='category == "nickname"'>
	  				and nickname like '%${keyword}%'
	  			</when>
	  			<when test='category == "email"'>
	  				and email like '%${keyword}%'
	  			</when>
	  		</choose>
  			order by NAME,BIRTHDATE ASC limit #{branchoffset}, #{branchnoOfRecords}
  		</select>
  		<select id ="branch_writeInfoList" resultMap = "UserVo">
  			select * from mydb.user_info where info = 1 order by user_info.name,user_info.birthDate ASC
  		</select>
  		
  	<!-- 회원리스트에서 id값을 통해 유저정보 가져오기-->	
  		<select id="user_selectOne" resultType="com.bit.yes.model.entity.UserVo">
  			select * from mydb.user_info where id = #{id}
  		</select>	
  	<!-- 회원리스트에서 id값을 통해 가맹점정보 가져오기(유저인데 만약 reginstNum이 있으면 이것도 가져가서 출력) -->	
  		<select id="user_branch_selectOne" resultType="com.bit.yes.model.entity.branch_infoVo">
  			select * from mydb.branch_info where id = #{id}
  		</select>
  	<!-- branch_address로 db가 따로 있으므로 이것도 가져가서 출력 -->	
  		<select id="user_branch_selectOne_address" resultType="com.bit.yes.model.entity.branch_addressVo">
  			select * from mydb.branch_address where id = #{id}
  		</select>
	
	<!-- 공지사항 쿼리문 -->
	<select id="selectAll" resultType="com.bit.yes.model.entity.NoticeVo">
	  		SELECT * FROM NOTICE ORDER BY NOTICE.INDEX DESC
	  	
	</select>
  	
  	<select id="selectOne" resultType="com.bit.yes.model.entity.NoticeVo">
  			SELECT * FROM NOTICE WHERE NOTICE.INDEX = #{index}
  	</select>
  	
  	<insert id="insertOne" parameterType="com.bit.yes.model.entity.NoticeVo">
  			INSERT INTO NOTICE VALUES (#{index}, #{title}, #{content}, #{writer}, date_format(now(),"%Y-%c-%d"))
  	</insert>
  	
  	<delete id="deleteOne" parameterType="int">
  			DELETE NOTICE, NOTICE_IMAGES FROM NOTICE INNER JOIN NOTICE_IMAGES WHERE notice.index=notice_IMAGES.index AND notice_IMAGES.index=#{value};
  	</delete>

  	<delete id="updatedelete" parameterType="int">
  			DELETE FROM mydb.notice_images WHERE notice_images.index=#{index};
  	</delete>

  	<insert id="updateimg" parameterType="com.bit.yes.model.entity.ImageVo">
  			insert into NOTICE_IMAGES values(#{index}, #{imageName})
  	</insert>
  	
  	<update id="updateOne" parameterType="com.bit.yes.model.entity.NoticeVo">
  			UPDATE NOTICE SET TITLE=#{title}, CONTENT=#{content} WHERE notice.index = #{index}
  	</update>
  
  	<!-- notice_paging 페이징 처리 -->
  	<!-- 전체 레코드 개수 조회 -->
	  	<select id ="writeGetCount" parameterType="hashmap" resultType="int">
	  		select count(*) from mydb.notice
	  		<choose>
	  			<when test="category == 'title'">
	  				where title like '%${keyword}%'
	  			</when>
	  			<when test='category == "writer"'>
	  				where writer like '%${keyword}%'
=======
<!-- review 전체 list -->

	  	<select id ="writeGetCount" parameterType="hashmap" resultType="int">
	  		select count(*) from review 
	  		<choose>
	  			<when test="category == 'location'">
	  				where branchID=(select id from branch_address where roadAddress like '%${keyword}%' or jibunAddress like '%${keyword}%')
	  			</when>
	  			<when test='category == "store"'>
	  				where branchID=(select distinct id from branch_info where branchname like '%${keyword}%')
	  			</when>
	  			<when test='category == "menu"'>
	  				where branchID = (select distinct id from branch_menu where menu like '%${keyword}%')
>>>>>>> master
	  			</when>
	  		</choose>
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
<<<<<<< HEAD
  		<select id="writeList" parameterType="hashmap" resultMap="NoticeVo">
  			select * from mydb.notice
  			
  			<choose>
	  			<when test="category == 'title'">
	  				where title like '%${keyword}%'
	  			</when>
	  			<when test='category == "writer"'>
	  				where writer like '%${keyword}%'
	  			</when>
	  		</choose>
  			 order by notice.index DESC limit #{offset}, #{noOfRecords}
  		</select>
  		
  		<select id ="writeInfoList" resultMap = "NoticeVo">
  			select * from mydb.notice where info = 1 
  			<choose>
	  			<when test="category == 'title'">
	  				and title like '%${keyword}%'
	  			</when>
	  			<when test='category == "writer"'>
	  				and writer like '%${keyword}%'
	  			</when>
	  		</choose>
  			order by notice.index DESC
  		</select>
  		
<!--   		  	페이징 처리
  	전체 레코드 개수 조회
	  	<select id ="writeGetCount" resultType="int">
	  		select count(*) from mydb.notice
	  	</select>
	게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력)  	
  		<select id="writeList" parameterType="hashmap" resultMap="NoticeVo">
  			select * from mydb.notice order by notice.index DESC limit #{offset}, #{noOfRecords}
  		</select>
  		
  		<select id ="writeInfoList" resultMap = "NoticeVo">
  			select * from mydb.notice where info = 1 order by notice.index DESC
  		</select> -->
  		
  		
  		
  		
<!-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  -->  		
	<!-- 고객 상담 쿼리문 -->
	<select id="c_selectAll" resultType="com.bit.yes.model.entity.C_CsVo">
	  		SELECT * FROM client_Counsel ORDER BY client_Counsel.INDEX DESC
	  	
	</select>
  	
  	<select id="c_selectOne" resultType="com.bit.yes.model.entity.C_CsVo">
  			SELECT * FROM client_Counsel WHERE client_Counsel.INDEX = #{index}
  	</select>
  	
  	<select id="c_selectnickname" resultType="com.bit.yes.model.entity.UserVo">
  			SELECT * FROM user_info where id = #{id} 
  	</select>
  	<select id="c_selectAddress" resultType="com.bit.yes.model.entity.branch_addressVo">
  			select * from branch_address where id = #{id}
  	</select>
  	
  	<insert id="c_insertOne" parameterType="com.bit.yes.model.entity.C_CsVo">
  			INSERT INTO client_Counsel VALUES (#{branchID},#{clientID},#{index}, #{title}, #{content}, #{writer}, date_format(now(),"%Y-%c-%d"),null)
  	</insert>
  	
  	<!-- client_paging 페이징 처리 -->
  	<!-- 전체 레코드 개수 조회 -->
  	
	  	<select id ="c_writeGetCount" parameterType="hashmap" resultType="int">
	  		select count(*) from mydb.client_Counsel where clientID = #{clientID}
	  		
	  		<choose>
	  			<when test="category == 'title'">
	  				and title like '%${keyword}%'
	  			</when>
	  			<when test='category == "writer"'>
	  				and writer like '%${keyword}%'
	  			</when>
	  		</choose>
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
  		<select id="c_writeList" parameterType="hashmap" resultMap="C_CsVo">
  			select * from mydb.client_Counsel where clientID=#{clientID} 
  				<choose>
	  			<when test="category == 'title'">
	  				and title like '%${keyword}%'
	  			</when>
	  			<when test='category == "writer"'>
	  				and writer like '%${keyword}%'
	  			</when>
	  		</choose>
  			
  			order by client_Counsel.index DESC limit #{offset}, #{noOfRecords}
  		</select>
  		
  		<select id ="c_writeInfoList" resultMap = "C_CsVo">
  			select * from mydb.client_Counsel where info = 1 order by client_Counsel.index DESC
  		</select>
  		
<!-- 	  	<select id ="c_writeGetCount" resultType="int">
	  		select count(*) from mydb.client_Counsel where clientID = #{clientID}
	  	</select>
	게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력)  	
  		<select id="c_writeList" parameterType="hashmap" resultMap="C_CsVo">
  			select * from mydb.client_Counsel where clientID=#{clientID} order by client_Counsel.index DESC limit #{offset}, #{noOfRecords}
  		</select>
  		
  		<select id ="c_writeInfoList" resultMap = "C_CsVo">
  			select * from mydb.client_Counsel where info = 1 order by client_Counsel.index DESC
  		</select> -->
  		
  		<select id="reserveselectAll" resultType="com.bit.yes.model.entity.branch_infoVo" >
  			SELECT * FROM mydb.branch_info WHERE id = ANY(SELECT branchID FROM mydb.reserve_list WHERE clientID = #{id})
  		</select>
  		
  		<select id="reserveOne" resultType="com.bit.yes.model.entity.branch_infoVo" parameterType="java.lang.String">
  			select * from mydb.branch_info where id = #{id}
  		</select>
  		
  		
  		
  		
<!-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  -->  		
	<!-- 사업자 상담 쿼리문 -->
  	<select id="s_selectOne" resultType="com.bit.yes.model.entity.S_CsVo">
  			SELECT * FROM branch_Counsel WHERE branch_Counsel.INDEX = #{index}
  	</select>
  	
  	<insert id="s_insertOne" parameterType="com.bit.yes.model.entity.S_CsVo">
  			INSERT INTO branch_Counsel VALUES (#{index}, #{title}, #{content}, #{writer}, date_format(now(),"%Y-%c-%d"),null,#{questionSelect} )
  	</insert>
  	<select id="s_selectnickname" resultType="com.bit.yes.model.entity.UserVo">
  			SELECT * FROM user_info where id = #{id} 
  	</select>
  	
  	<!-- 페이징 처리 -->
  	<!-- 전체 레코드 개수 조회 -->
	  	<select id ="s_writeGetCount" parameterType="hashmap" resultType="int">
	  		select count(*) from mydb.branch_Counsel <!-- where writer = #{writer} -->
	  		  <choose>
	  			<when test="category == 'title'">
	  				where title like '%${keyword}%'
	  			</when>
	  			<when test='category == "writer"'>
	  				where writer like '%${keyword}%'
	  			</when>
	  		</choose>
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
  		<select id="s_writeList" parameterType="hashmap" resultMap="S_CsVo">
  			select * from mydb.branch_Counsel <!-- where writer=#{writer} -->
  			  <choose>
	  			<when test="category == 'title'">
	  				<!-- and --> where title like '%${keyword}%'
	  			</when>
	  			<when test='category == "writer"'>
	  				<!-- and --> where writer in (select writer from user_info where nickname like '%${keyword}%' and not registNum = 0) 
	  			</when>
	  		</choose>
  			 order by branch_Counsel.index DESC limit #{offset}, #{noOfRecords}
  		</select>
  		
  		<select id ="s_writeInfoList" resultMap = "S_CsVo">
  			select * from mydb.branch_Counsel where info = 1 order by branch_Counsel.index DESC
  		</select>
  		
<!-- 	  	<select id ="s_writeGetCount" resultType="int">
	  		select count(*) from mydb.branch_Counsel where writer = #{writer}
	  	</select>
	게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력)  	
  		<select id="s_writeList" parameterType="hashmap" resultMap="S_CsVo">
  			select * from mydb.branch_Counsel where writer=#{writer} order by branch_Counsel.index DESC limit #{offset}, #{noOfRecords}
  		</select>
  		
  		<select id ="s_writeInfoList" resultMap = "S_CsVo">
  			select * from mydb.branch_Counsel where info = 1 order by branch_Counsel.index DESC
  		</select> -->
  		
  		
  		
  		
<!-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  -->  		
	<!-- 관리자 상담 답변  쿼리문 -->
	<select id="ac_selectAll" resultType="com.bit.yes.model.entity.C_CsVo">
	  		SELECT * FROM client_Counsel ORDER BY client_Counsel.INDEX DESC
	  	
	</select>
  	
  	<select id="ac_selectOne" resultType="com.bit.yes.model.entity.C_CsVo">
  			SELECT * FROM client_Counsel WHERE client_Counsel.INDEX = #{index}
  	</select>
  	
  	<select id="ac_selectnickname" resultType="com.bit.yes.model.entity.UserVo">
  			SELECT * FROM user_info where id = #{id} 
  	</select>
  	
  	<update id="acupdateOne" parameterType="com.bit.yes.model.entity.C_CsVo">
  			UPDATE client_counsel SET COMMENT = #{comment} WHERE client_counsel.index = #{index}
  	</update>

  	<!-- 페이징 처리 -->
  	<!-- 전체 레코드 개수 조회 -->
	  	<select id ="ac_writeGetCount" resultType="int">
	  		select count(*) from mydb.client_Counsel
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
  		<select id="ac_writeList" parameterType="hashmap" resultMap="C_CsVo">
  			select * from mydb.client_Counsel order by client_Counsel.index DESC limit #{coffset}, #{cnoOfRecords}
  		</select>
  		
  		<select id ="ac_writeInfoList" resultMap = "C_CsVo">
  			select * from mydb.client_Counsel where info = 1 order by client_Counsel.index DESC
  		</select>
  		
  		<!-- 날짜를 통한 검색시 게시글 조회 -->
  		<select id = "sac_writeGetCount" resultType="int" >
  			<![CDATA[ 
  			select count(*) from mydb.client_Counsel WHERE calendar >= #{sDate} AND calendar <= #{eDate}
  			]]> 
  		</select>
  		
  		<select id="sac_writeList" parameterType="hashmap" resultMap="C_CsVo">
  			<![CDATA[ 
  			select * from mydb.client_Counsel WHERE calendar >= #{sDate} AND calendar <= #{eDate} order by client_Counsel.index DESC limit #{coffset}, #{cnoOfRecords}
  			]]> 
  		</select>
  		
  		<select id ="sac_writeInfoList" resultMap = "C_CsVo">
  			<![CDATA[ 
  			select * from mydb.client_Counsel where info = 1 order by client_Counsel.index DESC
  			]]> 
  		</select>
  		<!-- 날짜를 통한 검색시 게시글 조회 -->
  		
  		<select id="areserveselectAll" resultType="com.bit.yes.model.entity.branch_infoVo" >
  			SELECT * FROM mydb.branch_info WHERE id = ANY(SELECT branchID FROM mydb.reserve_list WHERE clientID = #{id})
  		</select>
  		
  		<select id="areserveOne" resultType="com.bit.yes.model.entity.branch_infoVo" parameterType="java.lang.String">
  			select * from mydb.branch_info where id = #{id}
  		</select>
	
	<select id="as_selectOne" resultType="com.bit.yes.model.entity.S_CsVo">
  			SELECT * FROM branch_Counsel WHERE branch_Counsel.INDEX = #{index}
  	</select>
  	
  	<select id="as_selectnickname" resultType="com.bit.yes.model.entity.UserVo">
  			SELECT * FROM user_info where id = #{id} 
  	</select>
  	
  	<update id="asupdateOne" parameterType="com.bit.yes.model.entity.S_CsVo">
  			UPDATE branch_counsel SET COMMENT = #{comment} WHERE branch_counsel.index = #{index}
  	</update>
  	<!-- 페이징 처리 -->
  	<!-- 전체 레코드 개수 조회 -->
	  	<select id ="as_writeGetCount" resultType="int">
	  		select count(*) from mydb.branch_Counsel
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
  		<select id="as_writeList" parameterType="hashmap" resultMap="S_CsVo">
  			select * from mydb.branch_Counsel order by branch_Counsel.index DESC limit #{soffset}, #{snoOfRecords}
  		</select>
  		
  		<select id ="as_writeInfoList" resultMap = "S_CsVo">
  			select * from mydb.branch_Counsel where info = 1 order by branch_Counsel.index DESC
  		</select>
  	<!-- 날짜를 통한 검색시 게시글 조회 -->
  		<select id = "sas_writeGetCount" resultType="int" >
  			<![CDATA[ 
  			select count(*) from mydb.branch_Counsel WHERE calendar >= #{sDate} AND calendar <= #{eDate}
  			]]> 
  		</select>
  		
  		<select id="sas_writeList" parameterType="hashmap" resultMap="S_CsVo">
  			<![CDATA[ 
  			select * from mydb.branch_Counsel WHERE calendar >= #{sDate} AND calendar <= #{eDate} order by branch_Counsel.index DESC limit #{soffset}, #{snoOfRecords}
  			]]> 
  		</select>
  		
  		<select id ="sas_writeInfoList" resultMap = "S_CsVo">
  			<![CDATA[ 
  			select * from mydb.branch_Counsel where info = 1 order by branch_Counsel.index DESC
  			]]> 
  		</select>
  		<!-- 날짜를 통한 검색시 게시글 조회 -->	
  		
  		
  		<!-- 파일 이미지 업로드 처리 -->
  		<insert id="noticeImgUpload" parameterType="com.bit.yes.model.entity.ImageVo">
		  	insert into notice_images values ((select max((mydb.notice.index)) from mydb.notice), #{imageName})
		  </insert>
		<select id="noticeSubImage" resultType="com.bit.yes.model.entity.ImageVo">
		  	select * from mydb.notice_images where notice_images.index = #{index}
		</select>

  		<!-- 파일 이미지 업로드 처리 -->
  		<insert id="c_counselImgUpload" parameterType="com.bit.yes.model.entity.ImageVo">
		  	insert into c_counsel_images values ((select max((mydb.client_counsel.index)) from mydb.client_counsel), #{imageName})
		  </insert>
		<select id="c_counselSubImage" resultType="com.bit.yes.model.entity.ImageVo">
		  	select * from mydb.c_counsel_images where c_counsel_images.index = #{index}
		</select>
		
  		<!-- 파일 이미지 업로드 처리 -->
  		<insert id="s_counselImgUpload" parameterType="com.bit.yes.model.entity.ImageVo">
		  	insert into s_counsel_images values ((select max((mydb.branch_counsel.index)) from mydb.branch_counsel), #{imageName})
		  </insert>
		<select id="s_counselSubImage" resultType="com.bit.yes.model.entity.ImageVo">
		  	select * from mydb.s_counsel_images where s_counsel_images.index = #{index}
		</select>
  		
<!-- 관리자용 mapper --> <!-- 관리자용 mapper --> <!-- 관리자용 mapper --> <!-- 관리자용 mapper --> <!-- 관리자용 mapper -->
  		
  		<!-- 전체 레코드 개수 조회 --> <!-- 전체 -->
	  	<select id ="management_writeGetCount" resultType="int">
	  		select count(*) from mydb.branch_info where acceptState = 0 
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
  		<select id="management_writeList" parameterType="hashmap" resultMap="branch_infoVo">
  			select * from mydb.branch_info where acceptState = 0 order by id ASC limit #{offset}, #{noOfRecords}
  		</select>
  		<select id ="management_writeInfoList" resultMap = "branch_infoVo">
  			select * from mydb.branch_info where info = 1 order by branch_info.id ASC
  		</select>
  		  	<!-- branch_address로 db가 따로 있으므로 이것도 가져가서 출력 -->	
  		<select id="management_address" resultType="com.bit.yes.model.entity.branch_addressVo">
  			select * from mydb.branch_address where id = #{id}
  		</select>	
  		
  		
  <!-- 추가 한 내용 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ  -->
  		<update id="manage_update" parameterType="java.lang.String">
  			UPDATE branch_info SET acceptState=1 WHERE branch_info.id = #{id} 
  		</update>
		<update id="manage_registNum" parameterType="java.lang.String"> 
			UPDATE user_info SET registNum=1 WHERE user_info.id = #{id} 
		</update>
		<delete id="manage_delete" parameterType="java.lang.String"> 
			DELETE branch_info, branch_address FROM branch_info INNER JOIN branch_address WHERE branch_info.id=branch_address.id AND branch_address.id=#{id}; 
		</delete>

	<!-- 전체 레코드 개수 조회 -->
	<!-- 전체 -->
		<select id="managementdel_writeGetCount" resultType="int">
			select count(*) from mydb.branch_info where acceptState = 1 
		</select>

<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->
		<select id="managementdel_writeList" resultMap="branch_infoVo" parameterType="hashmap"> 
			select * from mydb.branch_info where acceptState = 1 order by id ASC limit #{offset}, #{noOfRecords} 
		</select>
		<select id="managementdel_writeInfoList" resultMap="branch_infoVo"> 
			select * from mydb.branch_info where info = 1 order by branch_info.id ASC 
		</select>
		<update id="manage_delregistNum" parameterType="java.lang.String"> 
			UPDATE user_info SET registNum = 0 WHERE user_info.id = #{id} 
		</update>
		<delete id="manage_deldelete" parameterType="java.lang.String">
			DELETE branch_info, branch_address FROM branch_info INNER JOIN branch_address WHERE branch_info.id=branch_address.id AND branch_address.id=#{id}; 
		</delete>
  
  
  <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ  -->		
  </mapper>
=======
  		<select id="writeList" parameterType="hashmap" resultMap="reviewVo">
  			select * from review
  			<choose>
	  			<when test="category == 'location'">
	  				where branchID=(select id from branch_address where roadAddress like '%${keyword}%' or jibunAddress like '%${keyword}%')
	  			</when>
	  			<when test='category == "store"'>
	  				where branchID=(select distinct id from branch_info where branchname like '%${keyword}%')
	  			</when>
	  			<when test='category == "menu"'>
	  				where branchID = (select distinct id from branch_menu where menu like '%${keyword}%')
	  			</when>
	  		</choose>
  			 order by review.idx DESC limit #{offset}, #{noOfRecords}
  		</select>
  		
  		<select id ="writeInfoList" parameterType="hashmap" resultMap = "reviewVo">
  			select * from review where info = 1
  			<choose>
	  			<when test="category == 'location'">
	  				and where branchID=(select id from branch_address where roadAddress like '%${keyword}%' or jibunAddress like '%${keyword}%')
	  			</when>
	  			<when test='category == "store"'>
	  				and where branchID=(select distinct id from branch_info where branchname like '%${keyword}%')
	  			</when>
	  			<when test='category == "menu"'>
	  				and where branchID = (select distinct id from branch_menu where menu like '%${keyword}%')
	  			</when>
	  		</choose>
  			 order by review.idx DESC
  		</select>
  		
<!-- 	  	<select id ="writeGetCount" resultType="int">
	  		select count(*) from review
	  	</select>
	게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력)  	
  		<select id="writeList" parameterType="hashmap" resultMap="reviewVo">
  			select * from review order by review.idx DESC limit #{offset}, #{noOfRecords}
  		</select>
  		
  		<select id ="writeInfoList" resultMap = "reviewVo">
  			select * from review where info = 1 order by review.idx DESC
  		</select> -->
  
 <!--  -->
  
  <!--user추가  -->
<!--   <select id="reviewList" resultType="com.bit.yes.model.entity.ReviewVo">
  	select * from review
  </select> -->
  
  <select id="reviewListImage" parameterType="hashMap" resultType="com.bit.yes.model.entity.ImageVo">
  	select * from review_images where imageName like 'm_%'
  		<choose>
  			<when test="category =='location'">
  				and idx in (select idx from review where branchID=(select id from branch_address where roadAddress like '%${keyword}%' or jibunAddress like '%${keyword}%'))
  			</when>
  			<when test="category =='store'">
  				and idx in (select idx from review where branchID=(select distinct id from branch_info where branchname like '%${keyword}%'))
  			</when>
  			<when test="category =='menu'">
  				and idx in (select idx from review where branchID= (select distinct id from branch_menu where menu like '%${keyword}%'))
  			</when>
  		</choose>
  	 order by idx desc
  </select>
  
  <select id="reviewSubImage" resultType="com.bit.yes.model.entity.ImageVo">
  	select * from review_images where not imageName like 'm_%' and idx=#{val}
  </select>
  
  <select id="reviewMainImage" resultType="com.bit.yes.model.entity.ImageVo">
  	select * from review_images where imageName like 'm_%' and idx=#{val}
  </select>
  
  <select id="reviewSelect" resultType="com.bit.yes.model.entity.ReviewVo">
  	select * from review where idx=#{val}
  </select>
  
  <delete id="reviewDelete" parameterType="int">
  	delete from review where idx=#{val};
  </delete>
  
  <delete id="reviewDeleteFile" parameterType="int">
  	delete from review_images where idx=#{val};
  </delete>
  
  <insert id="reviewWrite" parameterType="com.bit.yes.model.entity.ReviewVo">
  	insert into review (branchID, clientID, title, content, calendar, rating)
  	 values(#{branchID}, #{clientID}, #{title}, #{content}, current_timestamp(), #{rating})
  </insert>
  
  <insert id="reviewImgUpload" parameterType="com.bit.yes.model.entity.ImageVo">
  	insert into review_images values ((select max(idx) from review), #{imageName})
  </insert>
  
  <update id="reviewEdit" parameterType="com.bit.yes.model.entity.ReviewVo">
  	update review set title=#{title}, rating=${rating}, content=#{content} where idx=#{idx}
  </update>
  
<!--   	<select id="selectAll" resultType="com.bit.myapp06.model.entity.GuestVo">
  	SELECT * FROM GUEST ORDER BY SABUN DESC
  	</select>
  	
  	<select id="selectOne" parameterType="int" resultType="com.bit.myapp06.model.entity.GuestVo">
  	SELECT * FROM GUEST WHERE SABUN=#{value}
  	</select>
  	
  	<update id="updateOne" parameterType="com.bit.myapp06.model.entity.GuestVo">
  	UPDATE GUEST SET NAME=#{name},PAY=#{pay} WHERE SABUN=#{sabun}
  	</update>
  
  	<delete id="deleteOne" parameterType="int">
  	DELETE FROM GUEST WHERE SABUN=#{value}
  	</delete> -->
  </mapper>
>>>>>>> master
